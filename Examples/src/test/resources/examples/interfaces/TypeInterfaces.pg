type interfaces.InnerType {
    TestInt32 : int32
}

type interface interfaces.BaseInterface1 {
    TestBaseInterface1Field : int32
}

type interface interfaces.BaseInterface2 {
    TestBaseInterface2Field : int32
}

type interface interfaces.TypeInterface : interfaces.BaseInterface1, interfaces.BaseInterface2 {
    TestDouble : double
    TestFloat : float
    TestInt32 : int32
    TestInt64 : int64
    TestBool : bool
    TestString : string
    TestBytes : bytes
    TestDecimal : decimal
    TestDate : date
    TestDateTime : datetime
    TestLocalDate : localdate
    TestLocalDateTime : localdatetime
    TestMap : map<int32, int32>
    TestSet : set<int32>
    TestList : list<int32>
    TestValueOrError : valueorerror<int32>
    TestType : interfaces.InnerType
    TestArray : int32[]
    TestOptionalDouble : optional double
    TestOptionalFloat : optional float
    TestOptionalInt32 : optional int32
    TestOptionalInt64 : optional int64
    TestOptionalBool : optional bool
    TestOptionalString : optional string
    TestOptionalBytes : optional bytes
    TestOptionalDecimal : optional decimal
    TestOptionalDate : optional date
    TestOptionalDatetime : optional datetime
    TestOptionalLocalDate : optional localdate
    TestOptionalLocalDateTime : optional localdatetime
    TestOptionalMap : optional map<int32, int32>
    TestOptionalSet : optional set<int32>
    TestOptionalList : optional list<int32>
    TestOptionalValueOrError : optional valueorerror<int32>
    TestOptionalType : optional interfaces.InnerType
    TestOptionalArray : optional int32[]
}

type interfaces.UseInterface : interfaces.TypeInterface {
    TestInterfaceUsage : interfaces.TypeInterface
}

//TODO:KMD need to flesh out some more complicated examples where the same interface is implemented many times, we will need to enumerate them as only to save each one once at the lowest point