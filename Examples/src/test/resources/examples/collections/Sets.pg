type collections.Sets {
//    TestDoubleSet : set<double>
//    TestFloatSet : set<float>
    TestInt32Set : set<int32>
    TestInt64Set : set<int64>
    TestBoolSet : set<bool>
    TestStringSet : set<string>
    TestBytesSet : set<bytes>
    TestDecimalSet : set<decimal>
    TestDateSet : set<date>
    TestDateTimeSet : set<datetime>
    TestLocalDateTimeSet : set<localdatetime>
    TestMapSet : set<map<string, string>>
    TestSetSet : set<set<string>>
//    TestValueOrErrorSet : set<valueorerror<decimal>> //Hmm what does this mean if there is an error
    TestObjectSet : set<collections.InnerType>
    TestArraySet : set<string[]>
//    TestOptionalDoubleSet : set<optional double>
//    TestOptionalFloatSet : set<optional float>
    TestOptionalInt32Set : set<optional int32>
    TestOptionalInt64Set : set<optional int64>
    TestOptionalBoolSet : set<optional bool>
    TestOptionalStringSet : set<optional string>
    TestOptionalBytesSet : set<optional bytes>
    TestOptionalDecimalSet : set<optional decimal>
    TestOptionalDateSet : set<optional date>
    TestOptionalDatetimeSet : set<optional datetime>
    TestOptionalLocalDateTimeSet : set<optional localdatetime>
    TestOptionalMapSet : set<optional map<string, string>>
    TestOptionalSetSet : set<optional set<string>>
//    TestOptionalValueOrErrorSet : set<optional valueorerror<decimal>>
    TestOptionalObjectSet : set<optional collections.InnerType>
    TestOptionalArraySet : set<optional string[]>
}