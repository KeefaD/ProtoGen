type simple.InnerType {
    TestFloat : float
}

type simple.Type<T> {
    TestDouble : double
    TestFloat : float
    TestInt32 : int32
    TestInt64 : int64
    TestBool : bool
    TestString : string
//    TestBytes : bytes
    TestDecimal : decimal
    TestDate : date
    TestDatetime : datetime
    TestLocaldatetime : localdatetime
//    TestMap : map<string, string>
//    TestSet : set<string>
//    TestValueorerror : valueorerror<decimal>
    TestType : simple.InnerType
//    TestGenericType : T //Not sure about this, T needs to be protogen type, how do we enforce this, I think we will have to put protogen type as bounds all the time
//    TestArray : string[]
    TestOptionalDouble : optional double
    TestOptionalFloat : optional float
    TestOptionalInt32 : optional int32
    TestOptionalInt64 : optional int64
    TestOptionalBool : optional bool
    TestOptionalString : optional string
//    TestOptionalBytes : optional bytes
    TestOptionalDecimal : optional decimal
    TestOptionalDate : optional date
    TestOptionalDatetime : optional datetime
    TestOptionalLocaldatetime : optional localdatetime
//    TestOptionalMap : optional map<string, string>
//    TestOptionalSet : optional set<string>
//    TestOptionalValueorerror : optional valueorerror<decimal>
    TestOptionalType : optional simple.InnerType
//    TestOptionalGenericType : optional T //Not sure about this, T needs to be protogen type, how do we enforce this, I think we will have to put protogen type as bounds all the time
//    TestOptionalArray : optional string[]
}